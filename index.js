import 'dotenv/config'
// import { JSONFilePreset } from 'lowdb/node'
// import { Low } from 'lowdb'
// import { JSONFile } from 'lowdb/node'
import { Bot, GrammyError,HttpError, Keyboard } from "grammy";
// const { KeyboardButtonRequestUser } = require('grammy/types')
// import {createChooseUserBtn} from './utils';
const bot = new Bot(process.env.BOT_TOKEN);
const createChooseUserBtn = (ctx) => {
	return (
		[[{
			text: '–ö —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤',
			request_users: {
				request_id: ctx.message.from.id,
				request_username: true,
				user_is_bot: false
			}
		}]])
}
// const db = new Low(new JSONFile('file.json'), {})
// await db.read()


import { LowSync } from 'lowdb'
import { JSONFileSync } from 'lowdb/node'

const db = new LowSync(new JSONFileSync('db.json'), {users: []})

bot.api.setMyCommands([
	{
		command: 'start',
		description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'
	},
	{
		command: 'menu',
		description: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é'
	},
	{
		command: 'tickets',
		description: '–ë–∏–ª–µ—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞'
	}
]);

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é
const menuLabels = ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã'];
const onFailSub = ['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', '<- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'];
const menuRows = menuLabels.map((label) => {
	return [
		Keyboard.text(label)
	]
})
const onFailSubRows = onFailSub.map((label) => {
	return [
		Keyboard.text(label)
	]
})
const menuKeyboard = Keyboard.from(menuRows).resized().oneTime()
const shareUserKeyboard = new Keyboard().text('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞').resized()
const onFailSubKeyboard = Keyboard.from(onFailSubRows).resized().oneTime()

bot.command('start', async (ctx) => {
	if (ctx.from.is_bot === false) {
		const username = ctx.msg.from.username
		await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${username}! –Ø - –±–æ—Ç —Ç–≥-–∫–∞–Ω–∞–ª–∞: <a href="https://t.me/shuratest">Shura Test</a>`, {
			parse_mode: 'HTML',
			reply_markup: menuKeyboard,
		})
	}
})

bot.command('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', async (ctx) => {
	await ctx.reply('–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤', {
		reply_markup: {
			keyboard: createChooseUserBtn(ctx),
			resize_keyboard: true,
			one_time_keyboard: true
		}
	})
})


bot.command('menu', (ctx) => {
		ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ`, {
		parse_mode: 'HTML',
		reply_markup: menuKeyboard
	})
})

bot.command('tickets', async (ctx) => {
	ctx.reply('–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–≤—à–µ–≥–æ—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –¥—Ä—É–≥–∞, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–∏–ª–µ—Ç—ã —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å N –±–∏–ª–µ—Ç–æ–≤', {
		reply_markup: menuKeyboard
	})
})

bot.hears('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã', async (ctx) => {
	ctx.reply('–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–≤—à–µ–≥–æ—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –¥—Ä—É–≥–∞, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–∏–ª–µ—Ç—ã —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å N –±–∏–ª–µ—Ç–æ–≤', {
		reply_markup: menuKeyboard
	})
})

bot.hears('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª', async (ctx) => {
	let id = ctx.msg.from.id;
	let username = ctx.msg.from.username;
	let pass = await bot.api.getChatMember('@shuratest', id);

	if (pass.status == 'left') {
		await ctx.reply('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª',
			{
				reply_parameters: { message_id: ctx.msg.message_id },
				reply_markup: onFailSubKeyboard
			}
		)
	} else {
		await ctx.reply('–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ',
			{
				reply_parameters: { message_id: ctx.msg.message_id },
				reply_markup: shareUserKeyboard
			}
		)
	}
})

bot.hears('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', async (ctx) => {
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤', {
		reply_markup: {
			keyboard: createChooseUserBtn(ctx),
			resize_keyboard: true,
			one_time_keyboard: true
		}
	})
})

bot.on(':users_shared', async (ctx) => {
	// console.log(ctx.message.users_shared);
	let user = ctx.message.users_shared.users[0];
	let id = user.user_id;
	console.log('sub: ', ctx.message.from.id, 'newUser: ', id );

	try {
		const pass = await bot.api.getChatMember('@shuratest', id);
		user.status = pass.status

		if (user.status == 'left') {
			console.log('–°—Ä–∞–±–æ—Ç–∞–ª 1');
		await ctx.reply('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã üëç')
		await ctx.reply('–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É: https://t.me/+hA7XB2pUFmJlZDgy')
		await ctx.reply(`–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—Å—è –±–∏–ª–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü–æ–º–Ω–∏—Ç–µ, —á–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É`, {
			reply_markup: {
				keyboard: createChooseUserBtn(ctx),
				resize_keyboard: true,
				one_time_keyboard: true
			}
		})
		db.read()
		const data = {
			"sub": ctx.message.from.id,
			"newUser": id
		}
		db.update(({ users }) => users.push(data))
		return db;
	} else if (user.status == 'kicked') {
		await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∫–∞–Ω–∞–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–∫–∞`, {
			reply_markup: {
				keyboard: createChooseUserBtn(ctx),
				resize_keyboard: true,
				one_time_keyboard: true
			}
		})
	} else await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–∫–∞`, {
				reply_markup: {
					keyboard: createChooseUserBtn(ctx),
					resize_keyboard: true,
					one_time_keyboard: true
			}
			})
	} catch (error) {
		console.log('–°—Ä–∞–±–æ—Ç–∞–ª Catch');
		await ctx.reply('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã üëç')
		await ctx.reply('–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É: https://t.me/+hA7XB2pUFmJlZDgy')
		await ctx.reply(`–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—Å—è –±–∏–ª–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü–æ–º–Ω–∏—Ç–µ, —á–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É`, {
			reply_markup: {
				keyboard: createChooseUserBtn(ctx),
				resize_keyboard: true,
				one_time_keyboard: true
			}
		})
		db.read()
		// console.log(db.data);
		console.log(!db.data.users.find((user) => user["newUser"] == id));
		if ((!db.data.users.length) || (!db.data.users.find((user) => user.newUser == id))) {
			console.log('–ó–∞–ø–∏—Å—å');
			const data = {
				"sub": ctx.message.from.id,
				"newUser": id
			}
			db.update(({ users }) => users.push(data))
			return db;
		}
	}
	})
	
bot.hears('<- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', async (ctx) => {
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
		{
			reply_markup: menuKeyboard
		}
	)
})

bot.hears('–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥-–∫–∞–Ω–∞–ª', async (ctx) => {
	await ctx.reply(`[Shura Test Channel](https://t.me/shuratest)`,
		{
			parse_mode: 'MarkdownV2',
			disable_web_page_preview: true
		})
})

bot.hears('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', (ctx) => {
	ctx.reply('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–≥ –∫–∞–Ω–∞–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ: <a href="https://t.me/shuratest">Shura Test</a>', {
		parse_mode: 'HTML',
	})
})

bot.catch((err) => {
	const ctx = err.ctx;
	console.error(`Error while handling update ${ctx.update.update_id}:`);
	const e = err.error;

	if (e instanceof GrammyError) {
		console.error("Error in request:", e);
	} else if (e instanceof HttpError) {
		console.error("Could not connect to Telegram", e);
	} else {
		console.error('Unknown error:', e);
	}
})
bot.start();
