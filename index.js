import 'dotenv/config'
import {JSONFilePreset } from 'lowdb/node'
import { Bot, GrammyError, HttpError, InlineKeyboard, Keyboard } from "grammy";
import { chooseWiner } from './utils.js';
const bot = new Bot(process.env.BOT_TOKEN)
const db = await JSONFilePreset(('users.json'), { "users": {} })
const cl = await JSONFilePreset(('contestList.json'), { "list": {}})
const createChooseUserBtn = (ctx) => {
	return (
		[
			[
				{
					text: '–ö —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤',
					request_users: {
						request_id: ctx.message.from.id,
						request_username: true,
						user_is_bot: false
					}
				}
			],
			[
				{
					text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã'
				}
			],
			[
				{
					text: '<- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
				}
			]
			
		])
}

// –ú–µ–Ω—é
bot.api.setMyCommands([
	{
		command: 'start',
		description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'
	},
	{
		command: 'menu',
		description: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é'
	},
	{
		command: 'tickets',
		description: '–ë–∏–ª–µ—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞'
	}
]);

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é
const menuLabels = ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã'];
const onFailSub = ['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', '<- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'];
const menuRows = menuLabels.map((label) => {
	return [
		Keyboard.text(label)
	]
})
const onFailSubRows = onFailSub.map((label) => {
	return [
		Keyboard.text(label)
	]
})
const menuKeyboard = Keyboard.from(menuRows).resized().oneTime()
const shareUserKeyboard = new Keyboard().text('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞').row().text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã').row().text('<- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é').resized()
const onFailSubKeyboard = Keyboard.from(onFailSubRows).resized().oneTime()

// –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
const labelHelpData = [
	['–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ —Ä–æ–∑—ã–≥—Ä—ã—à', 'getContestAndChooseWinner'],
	['–ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞', 'null'],
];
const labelHelpData2 = [
	['123', '123'],
	['–ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞', 'null'],
];
const helpButtonRow = labelHelpData.map(([label, data]) => InlineKeyboard.text(label, data));
const helpButtonRow2 = labelHelpData2.map(([label, data]) => InlineKeyboard.text(label, data));

const inlineKeyboardHelper = InlineKeyboard.from([helpButtonRow])
const inlineKeyboardHelper2 = InlineKeyboard.from([helpButtonRow2])



// –°–ø–µ—Ü–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
bot.callbackQuery('getContestAndChooseWinner', async (ctx) => {
	bot.api.editMessageReplyMarkup(
		ctx.update.callback_query.message.chat.id,
		ctx.update.callback_query.message.message_id, {
			reply_markup: inlineKeyboardHelper2
	})
	await ctx.reply('–í –∫–æ–Ω–∫—É—Ä—Å–µ –ø–æ–±–µ–¥–∏–ª %–∏–º—è', {
		
	})
	await ctx.answerCallbackQuery({
		text: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!'
	})
})

bot.command('getContestList', async (ctx) => {
	if (ctx.message.from.id == 951161100 || ctx.message.from.id == 1070235538) {
		db.read()
		const usersList = Object.keys(db.data.users)
		let contestList = []
		for (let i = 0; i < usersList.length; i++) {
			const userId = usersList[i]
			console.log('id –∏–Ω–≤–∞–π—Ç–µ—Ä–∞', userId);
			const arrayOfInvitedUsers = db.data.users[userId]
			for (let i = 0; i < arrayOfInvitedUsers.length; i++) {

				try {
					const pass = await bot.api.getChatMember('@testchannel_178', arrayOfInvitedUsers[i]);
					if (pass.status == 'member') {
						contestList.push(userId)
					}
				} catch (error) {
					console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è');
				}
				
			}
		}
		console.log(contestList);
		const today = new Date();
		const dd = String(today.getDate()).padStart(2, '0');
		const mm = String(today.getMonth() + 1).padStart(2, '0');
		const yyyy = today.getFullYear();
		const hour = String(today.getHours())
		const min = String(today.getMinutes())
		cl.read()
		cl.update(({ }) => {
			console.log('–ó–∞–ø–∏—Å—å –≤ contestList');
			cl.data = {contestList}
		})
		await ctx.reply(`–ó–∞–ø–∏—Å—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞, —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–æ–º–µ–Ω—Ç ${dd}.${mm}.${yyyy} ${hour}:${min}`)
		return cl;
	}
	
	
})
bot.command('help', async (ctx) => {
	if (ctx.message.from.id == 951161100 || ctx.message.from.id == 1070235538) {
		ctx.reply('–ü–µ—Ä–µ–¥ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫, –æ—Ç–ø—Ä–∞–≤–∏–≤ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /getContestList, –≤ –æ—Ç–≤–µ—Ç –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞. –î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /choose_winner. –í –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç –≤–µ—Ä–Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!', {
			reply_markup: inlineKeyboardHelper
		})
	} else ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')
})	

bot.command('start', async (ctx) => {
	if (ctx.from.is_bot === false) {
		const username = ctx.msg.from.username
		await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${username}!
–Ø - –±–æ—Ç —Ç–≥-–∫–∞–Ω–∞–ª–∞: <a href="https://t.me/testchannel_178">–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª</a>`, {
			parse_mode: 'HTML',
			reply_markup: new InlineKeyboard().text('–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ', 'participate'),
		})
	}
})

// –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
bot.callbackQuery('participate', async (ctx) => {
	await ctx.editMessageText(`–ó–∞–¥–∞—á–∏ üëá
–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üü•
–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ üü•`)
	await ctx.editMessageReplyMarkup({reply_markup: new InlineKeyboard().text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª', 'check_sub')})
})

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
bot.callbackQuery('check_sub', async (ctx) => {
	const id = ctx.update.callback_query.from.id
	try {
		let pass = await bot.api.getChatMember('@testchannel_178', id)
		if (pass.status == 'left') {
			await ctx.editMessageText(`–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª ‚ùå
–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëá`)
			await ctx.editMessageReplyMarkup({reply_markup: new InlineKeyboard().text('–ü–µ—Ä–µ–π—Ç–∏ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 'go_and_sub').text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª', 'check_sub')})
		} else {
			await ctx.editMessageText(`–ó–∞–¥–∞—á–∏ üëá
–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ‚úÖ
–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ üü•`)
			await ctx.editMessageReplyMarkup({ reply_markup: new InlineKeyboard().text('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', 'invite_friend') })
			await ctx.answerCallbackQuery('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞ üëçüèª')
		}
	} catch (error) {
		console.log('error');
	}
})

// –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
bot.callbackQuery('go_and_sub', async (ctx) => {

})

bot.callbackQuery('invite_friend', async (ctx) => {

})


bot.command('menu', (ctx) => {
	ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ`, {
	parse_mode: 'HTML',
	reply_markup: menuKeyboard
})
})

bot.command('choose_winner', async (ctx) => {
	if (ctx.message.from.id == 951161100 || ctx.message.from.id == 1070235538) {
		cl.read()
		const winnerId = chooseWiner(cl.data.contestList)
		const pass = await bot.api.getChatMember('@testchannel_178', winnerId)
		const winner = pass.user;
		ctx.reply(`–í —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–±–µ–¥–∏–ª ${winner.first_name} @${winner.username}`)
	}
})

bot.command('tickets', async (ctx) => {
	const userId = ctx.message.from.id;
	db.read()
	if (Boolean(db.data.users[userId])) {
		const invitedUsers = db.data.users[userId];
		let tickets = 0
		for (let i=0; i < invitedUsers.length; i++) {
			try {
				let pass = await bot.api.getChatMember('@testchannel_178', invitedUsers[i])
				if (pass.status == 'member') {
					tickets += 1
				}
			} catch (error) {
				console.log('error: ', error);
			}
		}		
		await ctx.reply(`–ò–∑ ${invitedUsers.length} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –í–∞–º–∏ –¥—Ä—É–∑–µ–π –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å ${tickets}! –ò—Ç–æ–≥–æ —É –≤–∞—Å ${tickets} –±–∏–ª–µ—Ç(–∞/–æ–≤)`, {
			reply_markup: menuKeyboard
		})
	} else await ctx.reply('–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞, —É –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ')
	await ctx.reply('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ', {
		reply_markup: {
			keyboard: createChooseUserBtn(ctx),
			resize_keyboard: true,
			one_time_keyboard: true
		}
	})
})


bot.hears('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã', async (ctx) => {
	const userId = ctx.message.from.id;
	db.read()
	if (Boolean(db.data.users[userId])) {
		const invitedUsers = db.data.users[userId];
		let tickets = 0
		for (let i=0; i < invitedUsers.length; i++) {
			try {
				let pass = await bot.api.getChatMember('@testchannel_178', invitedUsers[i])
				if (pass.status == 'member') {
					tickets += 1
				}
			} catch (error) {
				console.log('error: ', error);
			}
		}		
		await ctx.reply(`–ò–∑ ${invitedUsers.length} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –í–∞–º–∏ –¥—Ä—É–∑–µ–π –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å ${tickets}! –ò—Ç–æ–≥–æ —É –≤–∞—Å ${tickets} –±–∏–ª–µ—Ç(–∞/–æ–≤)`, {
			reply_markup: menuKeyboard
		})
	} else await ctx.reply('–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞, —É –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ')
	await ctx.reply('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ', {
		reply_markup: {
			keyboard: createChooseUserBtn(ctx),
			resize_keyboard: true,
			one_time_keyboard: true
		}
	})
})

bot.hears('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª', async (ctx) => {
	let id = ctx.msg.from.id;
	let pass = await bot.api.getChatMember('@testchannel_178', id);

	if (pass.status == 'left') {
		await ctx.reply('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª',
			{
				reply_parameters: { message_id: ctx.msg.message_id },
				reply_markup: onFailSubKeyboard
			}
		)
	} else {
		await ctx.reply('–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ',
			{
				reply_parameters: { message_id: ctx.msg.message_id },
				reply_markup: shareUserKeyboard
			}
		)
	}
})
bot.callbackQuery()
bot.hears('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', async (ctx) => {
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤', {
		reply_markup: {
			keyboard: createChooseUserBtn(ctx),
			resize_keyboard: true,
			one_time_keyboard: true
		}
	})
})



bot.on(':users_shared', async (ctx) => {
	let sub = ctx.message.from.id
	let newUser = ctx.message.users_shared.users[0];
	let id = newUser.user_id;
	console.log('sub: ', sub, 'newUser: ', id );

	try {
		const pass = await bot.api.getChatMember('@testchannel_178', id);
		newUser.status = pass.status

		if (newUser.status == 'left') {
			await ctx.reply('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã üëç')
			await ctx.reply('–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É: https://t.me/testchannel_178')
			await ctx.reply(`–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—Å—è –±–∏–ª–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü–æ–º–Ω–∏—Ç–µ, —á–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É`, {
				reply_markup: {
					keyboard: createChooseUserBtn(ctx),
					resize_keyboard: true,
					one_time_keyboard: true
				}
			})
			db.read()
			db.update(({users}) => {
				if (!Object.hasOwn(users, sub)) {
					console.log('–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –∏–∑ Catch');
					users[sub] = [];
					users[sub].push(id)
				} else if (users[sub].includes(id)) {
				console.log('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª —ç—Ç–æ–≥–æ –¥—Ä—É–≥–∞');
				} else {
					console.log('–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤')
					users[sub].push(id)
				}
			})
			return db;
		} else if (newUser.status == 'kicked') {
			await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newUser.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∫–∞–Ω–∞–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–∫–∞`, {
				reply_markup: {
					keyboard: createChooseUserBtn(ctx),
					resize_keyboard: true,
					one_time_keyboard: true
				}
			})
		} else await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newUser.username} —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–∫–∞`, {
				reply_markup: {
					keyboard: createChooseUserBtn(ctx),
					resize_keyboard: true,
					one_time_keyboard: true
				}
			})
	} catch (error) {
		console.log('–°—Ä–∞–±–æ—Ç–∞–ª Catch');
		await ctx.reply('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã üëç')
		await ctx.reply('–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É: https://t.me/testchannel_178')
		await ctx.reply(`–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—Å—è –±–∏–ª–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü–æ–º–Ω–∏—Ç–µ, —á–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É`, {
			reply_markup: {
				keyboard: createChooseUserBtn(ctx),
				resize_keyboard: true,
				one_time_keyboard: true
			}
		})
		db.read()
		db.update(({users}) => {
			if (!Object.hasOwn(users, sub)) {
				console.log('–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –∏–∑ Catch');
				console.log('sub: ', sub, 'id: ', id, );
				users[sub] = [];
				users[sub].push(id)
			} else if (users[sub].includes(id)) {
				console.log('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª —ç—Ç–æ–≥–æ –¥—Ä—É–≥–∞');
			} else {
				console.log('–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤')
				users[sub].push(id)
			}
		})
		return db;
	}
	})
	
bot.hears('<- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', async (ctx) => {
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
		{
			reply_markup: menuKeyboard
		}
	)
})

bot.hears('–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥-–∫–∞–Ω–∞–ª', async (ctx) => {
	await ctx.reply(`[testchannel_178](https://t.me/testchannel_178)`,
		{
			parse_mode: 'MarkdownV2',
			disable_web_page_preview: true
		})
})

bot.hears('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', (ctx) => {
	ctx.reply('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–≥ –∫–∞–Ω–∞–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ: <a href="testchannel_178">–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª</a>', {
		parse_mode: 'HTML',
	})
})

bot.catch((err) => {
	const ctx = err.ctx;
	console.error(`Error while handling update ${ctx.update.update_id}:`);
	const e = err.error;

	if (e instanceof GrammyError) {
		console.error("Error in request:", e);
	} else if (e instanceof HttpError) {
		console.error("Could not connect to Telegram", e);
	} else {
		console.error('Unknown error:', e);
	}
})

bot.on('message', async (ctx) => {
	await ctx.reply('–ú–Ω–µ –±–æ–ª–µ–µ –Ω–µ—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å...', {
		reply_parameters: {message_id: ctx.msg.message_id}
	})
})
bot.start();
